{
	"created_at": 1702405840,
	"content": "\nこの記事は[Nostr (2) Advent Calendar 2023](https://adventar.org/calendars/8880) 13日目の記事です。\n\n## 概要\n\nノーコードツールのn8nでNostrのボットを作ることができるノード（ノーコードツールの部品のようなもの）を作ったので使い方を解説します。\n\n![image](https://lh3.googleusercontent.com/pw/ABLVV86mtAjiXVEI6GIvO5arYghnxg5a8A4VJDlUITpv3cLaR8luuZvd85-APV_9xxI4dzJ6FP0dziROU_RItVxiBIkKJ1r41dnCm0aYkqx1bPG5sqMxwYv4sQLJmFSTdG1FDV2edyLBHMIjo1eNMvYPtThLNg=w1793-h976-s-no-gm?authuser=0)\n\n## n8n-nodes-nostrobots\n\n- MIT Licenseで公開しています\n- はじめて作って公開したのは半年以上前です\n\nhttps://github.com/ocknamo/n8n-nodes-nostrobots\n\n\n## n8nとは\n\nノーコードツールです。ノーコードツールといえば有名どころにZapierやIFTTTなどがありますがそういう感じのワークフロー自動化ツールです。\n\n公式の説明を引用します。\n\n> n8n - ワークフロー自動化ツール\n> n8n は、拡張可能なワークフロー自動化ツールです。 フェアコード配布モデルにより、n8n は常にソース コードが表示され、セルフホストで利用でき、独自のカスタム関数、ロジック、アプリを追加できます。 n8n のノードベースのアプローチにより、汎用性が高く、あらゆるものをあらゆるものに接続できます。\n> (機械翻訳)\n\nhttps://github.com/n8n-io/n8n\n\nn8nで組み合わせて使用できるワークフローの部品を\"ノード\"と呼びます。\n\n\n## コミュニティノードとは\n\nだれでも自由に作成できてみんなに共有できるノードです。Node.jsで作成することができます。\n\n作成方法はこちら。\n- https://docs.n8n.io/integrations/creating-nodes/\n\n雛形やチュートリアルがあるのでそこまで難しくありません。今回は作成方法などは紹介しません。\n\n\n## n8nの準備\n\nn8nはコードが公開されておりセルフホストも可能です。\n\n利用する簡単な方法としてはお金を払うか、セルフホストする方法があります。\n\n### お金を払う\n\n月20ユーロでプラットフォームを使用できまるようです。\n\nhttps://n8n.io/pricing/\n\n### セルフホスト\n\nDockerもしくはNode.jsを扱えるエンジニアであれば簡単にセルフホストできます。\n\nhttps://docs.n8n.io/hosting/\n\nまたUmbrelを運用している人であればアプリがストアにあるのでワンクリックでインストールできます。\n\nhttps://apps.umbrel.com/app/n8n\n\n![unbrelAppStore](https://lh3.googleusercontent.com/pw/ABLVV843Y0nvCrczIm9ZdL6wnJ7uMnMBpkN9LANMHUH1cPwSTMKs5uMizBOQtJF0LwFxv3omO09-tqRvyzvz4KAIkKtlTwILHZR-S6cSvpeSHu_Yj9nqM4jZt1lIWef5TRap0hsoMUUeFGkdKMhNMYUvqI7UBw=w1850-h969-s-no-gm?authuser=0)\n\n## コミュニティノードのインストール方法\n\nコミュニティノードの利用はリスクもあるため必ず公式のドキュメントを読んでから自己責任でインストールしてください。\n\nhttps://docs.n8n.io/integrations/community-nodes/\n\nここではn8n-nostrobotsのインストール方法だけ解説します。\n\nサイドメニューの`Settings`から`Community nodes`をページに移動し、インストールします\n\n![installDialog](https://lh3.googleusercontent.com/pw/ABLVV8664ZzIcTW8M5-9edEOagk88He5k21cLX7147qlJfJTQFTPtDsZ69hGt0FRsIaBcbPImZu6YP4LbNYARMgyIimoyrqGonS23Bw4-tAWsM7u68QlrgZptZWVjoIWy62azcZlS-35nwK97093IEEIPbQGwA=w1776-h976-s-no-gm?authuser=0)\n\nnpm Package Nameに`n8n-nodes-nostrobots`と入力してインストールを実行します\n\nしばらく待つと`Community nodes`一覧に追加されるのでこれでインストール完了です。\n\n![installed](https://lh3.googleusercontent.com/pw/ABLVV872ffdY-2-uw-e9_hUdld20TmS_sV1G9V5iFOEoFAYs9ZWcoUIlwyKGY8fGY7SEju-DwTDv9ORpvSRF5cweztWrhK9wLt-yRjQlKvoAu8lVzuQQTwvbhVFKqN8KLc0N-fgp4UDnwGVa6kCO8hvGD8xmgQ=w1776-h976-s-no-gm?authuser=0)\n\n## RSS Feed ボットの作成\n\n簡単なチュートリアルとしてRSS Feed ボットを作成してみましょう。\n\n### 準備\n\n先程説明した方法で`n8n-nodes-rss-feed-trigger`というコミュニティノードをインストールしてください。\n\nhttps://github.com/joffcom/n8n-nodes-rss-feed-trigger\n\n（一応実装を見たかったので私はコードもかるく確認していますが自己責任でお願いします）\n\n### ワークフロー作成\n\nWorkflows画面の`Add Workflow`からワークフローを追加できます。\n\n![emptyWorkflow](https://lh3.googleusercontent.com/pw/ABLVV86PfZXJJhuXrcCY3l9ZbBhVK6o8eJ18cn6aGUGqlC23POW687RZzxm3UD66DtmkPOd0lp92nxicZ1DtX1UsHC_gpkYn0p25_we86h89rxX0ofYGNwQJ7h14tj5ss-BUNrAbrqwZwAtdbhA8BjMKLKyt5g=w1776-h976-s-no-gm?authuser=0)\n\n#### トリガーノードの作成\n\nはじめにトリガーとなるノードを設定します。（n8n-nostrobotsにはまだトリガーノードは実装されていません）\n\"+\"をクリックして追加メニューを開きます。\n\nトリガーノードとして`n8n-nodes-rss-feed-trigger`を使用したいので\"rss\"と入力すると`RSS Feed Trigger`が選択肢に現れるので選択してください。\n\nとりあえずPollタイムをデフォルト値のままにしておきます。\n\nFeedURLは[Lorem RSS](https://lorem-rss.herokuapp.com/)がテストとして使用できます。\n\nFeed URLに以下のURLを設定してください。\n- `https://lorem-rss.herokuapp.com/feed?unit=second&interval=30`（30秒間隔でテスト用のFeedを取得できる設定）\n\n![rssTriggerSetting](https://lh3.googleusercontent.com/pw/ABLVV849e17Bgyl3EsHQKBORg3oMgv9jRzFvVMuO9cv1dsxoUpUXwxqBEUWbXhJ94MkyaqGliltudWkGxY5BfTsh9SAZsccskRycff1ra8S5AxqDu7lUAQU-8zS-BnhRurQ5S1dr8IRlBVgh0mYkkAAPVUmnDw=w1776-h976-s-no-gm?authuser=0)\n\n設定できたら`Fetch test Event`ボタンでテスト実行を行います。\n\n画像のようにテスト用のRSS Feedのデータが取得できます。\n\n\n#### クレデンシャルの作成\n\nサイドメニューからCredentialsを選択します。'Add Credential' ボタンで作成モーダルを開きます。\nフォームに\"nostr\"と入力すると\"Nostrobots API\"がサジェストされるので選択してください。ちなみに表示されない場合はコミュニティノードのインストールが完了していない可能性があります。\n\n![credentialSettingDialog](https://lh3.googleusercontent.com/pw/ABLVV85ftEMMON-lWlqhwo8_4PenFVTwnq54Jpes6TqB0MKjQioKSPk-L31pKnOhotJaTsJwjPAyI4M8xmNgTDEIENdO9m3ufzJZ6nAwMajKwKyAhQvzTnW0y-JMru6ybtlxI8vqEl5CJ1SprGG7pnJZ0E59TA=w1850-h969-s-no-gm?authuser=0)\n\nクレデンシャルの作成画面が開くのでSecretKeyを入力してください。HEXでもbech32(nsecで始まる形式)どちらでも大丈夫です。\n\nワークフローの作成途中は使い捨て可能なテストアカウントを作成して使用することをおすすめします。\n\n#### Nostrへの投稿の実行\n\nRssFeedTriggerノードの右側に出ている\"+\"をクリックして後に続くノードを追加します。\n\nnostrで検索すると`Nostr Read`と`Nostr Write`の2つのノードが表示されるので`Nostr Write`を選んでください。\n\n![AddNostrNode](https://lh3.googleusercontent.com/pw/ABLVV84PoOXwgHMazmiHsv2lcv6I-t9oWgDPLpxEW7adYzTn5-1LgAoxNB6K8kzGQrz75S5kL9lZ9nlNGjsq5z7tiRqbdCPZFrXUteSv2ytpCdQXmANShBWTHFjdE-gv6BM1-Z0JwDDkxlaw5746Ex-qNZS5Zg=w1417-h976-s-no-gm?authuser=0)\n\n選択肢が表示されたら（どれでもいいですが）`Basic Noteactions`を選ぶとノードが追加されます。\n\nノードの設定画面が開くので以下のように値を設定します。'Credential to connect with'には先程自分が作成したクレデンシャルを設定します。\n\n設定値は以下です。\n- Resource: BasicNote\n- Operation: Send\n- Content: Hello nostr\n- Custom Relay: `wss://nostr.mom`\n\nCustom Relayはテスト用に一つだけに設定しました。デフォルトに戻したい場合、項目のメニューから`Reset Value`を実行してください。\n\n設定が完了したら`Execute node`ボタンをクリックしてノードを実行します。\n\n実行が完了するとOUTPUTに実行結果が表示されます。\n\n![NodeSetting](https://lh3.googleusercontent.com/pw/ABLVV85PZn5a8vt6s1Xyfs5dVkWVrjhiT9X2iVroGbNpNoytYBL5gyvdRF7VkMJm5r8qmbsaO5jNuzqmqPc7QQGjmO9kOLTeixkkkD_xw0fU8sO9D0wZYcl_1xjVnXaLLTbDvxgV-P6EewfErfC_BgRQdcDf1w=w1313-h976-s-no-gm?authuser=0)\n\n`content:Hello nostr`を含むイベントが作成されており、sendResultが`0:[accepted]: wss://nostr.mom`になっていれば成功です。\n\n他のクライアントからも確認できます。（Custom Relayに設定したリレーをクライアントに設定する必要があります）\n\n![testnote1](https://lh3.googleusercontent.com/pw/ABLVV84ufCwONK4o4c7hg9srN_6l9Sk5T1QECId_zMotPBSmnkU8DlJnAp45zCBHFjzrlYvMT7iXSGr9oirPPEmUVBZqA-zZ_00kCtWl3XISsygAsANwvCPtklOWgkJgq6UuH5OhAvPA18sGZbg88axvVoO-Bg=w455-h976-s-no-gm?authuser=0)\n\n### RSSとの接続\n\nINPUTに`RSS Feed Trigger`の結果がSchema形式で表示されていると思います。`A conten`という項目をドラッグしてNostr Writeの'Content'のフォームドロップしてください。\n\nこれだけで実行済みのノードの結果のデータをコンテントに埋め込んで渡すことができます。\n\nこの状態でテスト実行して確かめてみましょう。\n\n![testnote2](https://lh3.googleusercontent.com/pw/ABLVV86JI3nUdpAtG2ed-3zhEZv9YougJr-05HhjokQlHVVttB4iw3ScLmCeqUrwJr8SKITlJGHhXX7DFg-bc36kzCUqdJevgAUqkZGPmMWm0d91S4nWxx5XDfPDxofqvGCfRp3KkXJwBfeUd-tMyg8TPPyiag=w1789-h976-s-no-gm?authuser=0)\n\nRSS Feedの内容を投稿できました。\n\n### 有効化\n\nあと有効化して実行するだけです。\n\n右上の赤い`Save`ボタンをクリックして保存したら、その左の`Inactive`と書かれたトグルボタンを有効化してください。確認モーダルが表示されるので確認して`Got it`を選択します。\n\n以上で完了です。\n\nクライアントから投稿ができているか見てみましょう。\n\n![client](https://lh3.googleusercontent.com/pw/ABLVV86rktosU9AR3WeiCHMXap37taAtUvgf97y4jCeuU_rIpfG5lPEfyFljjmguKJIXqcKy5-uC3EM81L1acHcW_uPDcJd210JLCbglnM8jfjoavb8A539yI84Nss48mDzZOK-cRImKaDxxmntfh6cMc-o-Vw=w454-h976-s-no-gm?authuser=0)\n\n1分ごとに投稿ができており、一度に2投稿できているので成功です！\n\nお疲れ様でした。これでRSS Feedボットの作成完了です。\n\n\n## 機能の解説\n\n以下は細かい機能解説になります。ドキュメント用に書いたものなので、興味がなければ読みとばしていただいで必要なときに参照してください。\n\n### Nostr Read\n\n#### 'Strategy'\n\n- type: セレクトボックス\n\nリレーからイベントを取得する方法を指定します。以下の２つのオプションを選ぶことができます。\nリレーに送るフィルタとしてなにを設定するかを選んでいるだけです。\n\n- UserPublickey\n- EventId\n\n\n##### UserPublickey\n\n対象のユーザを示す公開鍵文字列を指定できます。HEXでもbech32(npub)方式でもどちらでも指定できます。\n\n##### EventId\n\n対象のイベントのeventIdです。eventIdにリレーの情報が含まれる場合、指定したリレーに加えてそのリレーにも取得リクエストを送ります。\n\nHEXでもbech32(nevent)方式でもどちらでも指定できます。\n\n#### 期間の範囲指定\n\nイベントの取得対象期間を指定します。StrategyがUserPublickeyの場合のみ指定できます。\n以下のオプションを指定できます。\n\n- 'Relative'\n- 'From'\n- 'Unit'\n- 'Since'\n- 'Until'\n\n\n##### 'Relative'\n\n- type: トグルスイッチ\n\n期間の指定方法です。Relativeがオンの場合は過去に遡っていつから取得するかを相対的に指定することができます。（もちろん現在まで取得します）\n\n##### 'From'\n\n- type: 数字\n\n現在から遡っていつから取得範囲にするかを指定することができます。Relativeが有効な場合のみ指定できます。\n\n##### 'Unit'\n\n- type: セレクトボックス\n\n単位を選択肢から選ぶことができます。Relativeが有効な場合のみ指定できます。\n\n- 'Day'\n- 'Hour'\n- 'Minute'\n\n> NOTE:\n> 例えばFromを\"1\"に設定してUnitを\"day\"に設定した場合取得範囲は、”1日前からノードの実行時刻”までのイベントが対象になります。\n\n\n##### 'Since', 'Until'\n\n- type: 日時\n\nRelativeを無効にした場合期間範囲指定は'Since', 'Until'を使用します。\nその名の通り'Since'の日時から'Until'日時までの期間指定でイベントを取得することができます。\n\n\n#### 'Custom Relay'\n\n- type: テキスト\n\n問い合わせ先のリレーを指定します。リレーのURLを入力してください。複数を指定する場合はカンマ(,)でつなげて書いてください。\nデフォルト値としてリレーを8件設定しているため、ここは修正しないでそのまま使用してもらって構いません。ただし、当たり前ですがデフォルトリレーが正常に動いていることは保証できません。\n\n- デフォルトリレー\n\n```\nwss://relay.damus.io,wss://relay-jp.nostr.wirednet.jp,wss://nostr-relay.nokotaro.com,wss://nostr.fediverse.jp,wss://nostr.holybea.com,wss://nos.lol,wss://relay.snort.social,wss://nostr.mom\n```\n\n#### 'Error With Empty Result'\n\n- type: トグルスイッチ\n\n有効にした場合取得イベントが存在しない場合はエラーになってワークフローを停止することができます。無効の場合はイベントがなくても、エラーにはならず空配列を次のノードに実行結果として送ります。\n\n#### Sample\n\njackの直近１時間のイベントを取得してみた実行結果です。３件のイベントを配列で取得できました。\n\n- 設定値\n    - Strategy: 'UserPublickey'\n    - Pubkey: 'npub1sg6plzptd64u62a878hep2kev88swjh3tw00gjsfl8f237lmu63q0uf63m'\n    - Relative: True\n    - From: 1\n    - Unit: Hour\n    - Custom Relay: <デフォルト>\n    - Error With Empty Result: False\n\n\n```\n[\n  {\n    \"id\": \"6c1428c9afdd315f07a9b6e22118ce45c31b2a8de12ef694121ae1cfd06ee2df\",\n    \"kind\": 1,\n    \"pubkey\": \"82341f882b6eabcd2ba7f1ef90aad961cf074af15b9ef44a09f9d2a8fbfbe6a2\",\n    \"created_at\": 1702389559,\n    \"content\": \"Only for you. Of course\",\n    \"tags\": [\n      [\n        \"e\",\n        \"4e222fdb7edb65172f85f262eff95a53132bcac6ccd2842b23c79f8bc0872e15\"\n      ],\n      [\n        \"e\",\n        \"9295e82f3b802728dc18ef888bad81b3110711679982dc94e719f5a20e7e2528\"\n      ],\n      [\n        \"p\",\n        \"e88a691e98d9987c964521dff60025f60700378a4879180dcbbb4a5027850411\"\n      ]\n    ],\n    \"sig\": \"ad3b4873c8c4103555f5bdec4ad39cc0b029f000d88e67964a72e41359981440b776aea6e3758257346ae8c5efde6efe8cda2490abdfc3d0b02f675f06c9bada\"\n  },\n  {\n    \"content\": \"สวัสดีชาว bitcoiners ชาวไทย\",\n    \"created_at\": 1702388695,\n    \"id\": \"309dea1a6e298fe3b591e8c4f87736528ee867a94ffa820b3225aa9169c6a009\",\n    \"kind\": 1,\n    \"pubkey\": \"82341f882b6eabcd2ba7f1ef90aad961cf074af15b9ef44a09f9d2a8fbfbe6a2\",\n    \"sig\": \"e113577b3281eb6637abf5ee60aef6b7a0dd700bf6254196e862fee96d4806eefa80c37292919f4e38dedbdc2f1d2a16d58c4d3c1a7d1dab40514868f48d3277\",\n    \"tags\": [\n      [\n        \"e\",\n        \"4e222fdb7edb65172f85f262eff95a53132bcac6ccd2842b23c79f8bc0872e15\",\n        \"\",\n        \"reply\"\n      ],\n      [\n        \"p\",\n        \"82341f882b6eabcd2ba7f1ef90aad961cf074af15b9ef44a09f9d2a8fbfbe6a2\"\n      ]\n    ]\n  },\n  {\n    \"id\": \"4e222fdb7edb65172f85f262eff95a53132bcac6ccd2842b23c79f8bc0872e15\",\n    \"kind\": 1,\n    \"pubkey\": \"82341f882b6eabcd2ba7f1ef90aad961cf074af15b9ef44a09f9d2a8fbfbe6a2\",\n    \"created_at\": 1702388333,\n    \"content\": \"nostr:naddr1qq9rzdesxgensvpnxuusygxv5lh4g8dcx6y5z0vht38k5d0ya3eezk39jmrhqsfdj2rwwv33wcpsgqqqwens60xga9\",\n    \"tags\": [],\n    \"sig\": \"7f5d80867650d5fa2a7da55d20fd604423a785e028595d0c9fb56b80a2be0d555997e06e4f3a2d9930c183122fafa51bd8035e8eb9fe83d3cc47b13e040b29d8\"\n  }\n]\n```\n\n### Nostr Write\n\nNostrのリレーにイベントの書き込みを行うノードです。\nこのノードを使用する前に書き込みを行いたいアカウントの秘密鍵をn8nにクレデンシャル情報として登録する必要があります。\n\n\n#### 'Credential to connect with'\n\n- type: セレクトボックス\n\n作成したクレデンシャル情報を選択して投稿するアカウントを決めます。クレデンシャルを複数作成すると複数のアカウントが選択肢に追加されます。\nワークフローの作成途中は使い捨て可能なテストアカウントを作成して使用することをおすすめします。\n\n\n#### 'Resource'\n\n- type: セレクトボックス\n\nどのような方法でイベントを作成するか選択することができます。以下の３つのオプションがあります。\n\n- 'BasicNote'\n- 'Event(advanced)'\n- 'Raw Json Event(advanced)'\n\n##### 'BasicNote'\n\n一番単純なノートイベント(`kind1`)です。SNS用のクライアントで見ることができるイベントです。'Content'に本文を設定すれば使用できるため使い方も一番簡単で、おそらくNostrプロトコルをあまり理解していなくても利用可能です。\n\n##### 'Event(advanced)'\n\nBasicNoteと異なりkindやtagsを設定することができます。利用するには少なくともNIP-01を理解する必要があると思われます。\n\n\nBasicNoteから追加になるメニュー項目がかなりたくさんあります。以下に箇条書します。\n\n- Kind\n- Tags\n- ShowOtherOption\n    - EventId\n    - Pubkey\n    - Sig\n    - CreatedAt\n\nShowOtherOptionを有効にするとEventId以下のメニューを表示できます。これらを使う機会はかなり限られるためデフォルトで非表示にしています。\n\n注意点としてShowOtherOptionが有効な場合Sig(署名)が必須となるため'Credential to connect with'で選択したアカウントでは署名を行いません。自力で署名する必要があります。\n\n###### Kind\n\n- type: 数字\n\nイベントのkindナンバーを設定できます。\n詳しくはNIPを確認してください。\n- Event Kinds https://github.com/nostr-protocol/nips#event-kinds'\n\n###### Tags\n\n- type: json\n\nイベントに追加するタグを設定できます。jsonを入力する必要があります。jsonでパースできない場合やタグの配列形式ではない場合、実行時エラーとなることに注意してください。設定時にはバリデーションされません。\n\nタグの指定方法はクライアントでまちまちだったりして結構難しいです。これも基本的にNIPを確認してください。\n- Tags https://github.com/nostr-protocol/nips#standardized-tags\n\nFYI. メンションを行う場合のタグのサンプル\n\n```\n[[\"e\",\"dad5a4164747e4d88a45635c27a8b4ef632ebdb78dcd6ef3d12202edcabe1592\",\"\",\"root\"],\n[\"e\",\"dad5a4164747e4d88a45635c27a8b4ef632ebdb78dcd6ef3d12202edcabe1592\",\"\",\"reply\"],\n[\"p\",\"26bb2ebed6c552d670c804b0d655267b3c662b21e026d6e48ac93a6070530958\"],\n[\"p\",\"26bb2ebed6c552d670c804b0d655267b3c662b21e026d6e48ac93a6070530958\"]]\n```\n\n###### otherOption\n\nこれは細かく説明する必要もないかと思います。名前の通りの項目です。\n\n- EventId\n\t- type: テキスト\n- Pubkey\n\t- type: テキスト\n- Sig\n  - type: テキスト\n- CreatedAt\n  - type: 数字\n    - unixtimeです\n\n##### 'Raw Json Event(advanced)'\n\n生のjsonをそのまま設定できるオプションです。使い方は限られますが、Nostr Readで取得したイベントをそのままパブリッシュしたい場合などが考えられます。\n\n\n###### json\n\n- type: テキスト\n\n'Raw Json Event(advanced)'の場合のみ表示されます。jsonには完全な署名済みイベントのjsonを入力してください。したがって'Credential to connect with'で選択したアカウントで署名しません。\n\n\n#### 'Content'\n\n- type: テキスト\n\nイベントの本文です。Resourceの選択肢で'BasicNote'か'Event(advanced)'を選択した場合に利用できます。\n\n\n#### 'Operation'\n\n- type: セレクトボックス\n\n実行するオペレーションを選択します。いまは作成したイベントをリレーにパブリッシュする`Send`しかありません。\n\n#### Custom Relay\n\n- type: テキスト\n\nイベントを送信するリレーを指定します。スキーマやデフォルトリレーはNostr Readと同じです。\n\n### 実行時の挙動について\n\n- イベント投稿時のタイムアウトは10秒です。そのためノードの実行に10秒以上かかる場合があります。\n- 投稿が正常に完了すると結果をノードが出力します。\n\t- `[<statu:s>]: <Relay URL>`\n\t- 例（成功）: `[accepted]: wss://nos.lol`\n\t- 例（失敗）: `[failed]: wss://nos.lol`\n\t- 例（タイムアウト）: `[timeout]: wss://nos.lol`\n\n\n## まとめ\n\n網羅的にn8n-nostrobotsの利用方法について書きました。チュートリアルもやってみていただけると嬉しいです。\n\n個人的にNostr関係では一番ドッグフーディングしているプロジェクトなので、欲しい機能があればこれからもちょくちょくアップデートを続けようと思います。おかしなところがあったらissueで報告していただけると助かります。\n\nhttps://github.com/ocknamo/n8n-nodes-nostrobots/issues\n\n他の人みたいに英語化もして書こうと思いましたが時間がないので諦めました。正月の宿題にします。\n\nさてあしたのアドベントカレンダーは\n\n- sinnchan: Nostrとの出会いから、SNS放浪生活？になった１年について https://adventar.org/calendars/8880\n- hikari.huang: 新時代のSNS Nostrで小泉進次郎botを作った話 https://adventar.org/calendars/8794\n\nの2本立てです。楽しみですね。\n\n",
	"tags": [
		["d", "1702402471044"],
		["title", "ノーコードで作るnostrボット - n8n-nostrobots"],
		[
			"summary",
			"ノーコードツールのn8nでNostrのボットを作ることができるノード（ノーコードツールの部品のようなもの）を作ったので使い方を解説します。\nI created a node (like a part of a no-code tool) that allows you to create a Nostr bot using the no-code tool n8n, and I will explain how to use it."
		],
		["published_at", "1702405840"],
		["t", "nostr"],
		["t", "n8n"],
		[
			"image",
			"https://lh3.googleusercontent.com/pw/ABLVV85qzvf0WgI8oJNp7Q1Bc9ZxaLzEqC4SDgJd2SxWUceJMGwqhIkrQkZNlXM8R9hn5cBcoR7PYUWdZewmk9ZQWOuKrL2L377moa5o-WjHX6wnzXGAWy-VDFFSyH0xh7pn0lwTO1jtDbB2S7DI551sd-Q2dQ=w574-h292-s-no-gm?authuser=0"
		],
		[
			"zap",
			"26bb2ebed6c552d670c804b0d655267b3c662b21e026d6e48ac93a6070530958",
			"wss://purplepag.es",
			"95"
		],
		[
			"zap",
			"4918eb332a41b71ba9a74b1dc64276cfff592e55107b93baae38af3520e55975",
			"wss://purplepag.es",
			"1"
		],
		[
			"zap",
			"6b1b35c6dee48851bac53a4494ca8f819503be00212dbceb899dc03acd7641db",
			"wss://purplepag.es",
			"1"
		],
		[
			"zap",
			"32e1827635450ebb3c5a7d12c1f8e7b2b514439ac10a67eef3d9fd9c5c68e245",
			"wss://purplepag.es",
			"1"
		],
		[
			"zap",
			"84de35e2584d2b144aae823c9ed0b0f3deda09648530b93d1a2a146d1dea9864",
			"wss://purplepag.es",
			"1"
		],
		[
			"zap",
			"7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c",
			"wss://purplepag.es",
			"1"
		],
		[
			"alt",
			"This is a long form article, you can read it in https://habla.news/a/naddr1qqxnzdesxg6rqv35xucnqdp5qgszdwewhmtv25kkwryqfvxk25n8k0rx9vs7qfkkuj9vjwnqwpfsjkqrqsqqqa2884gqwk"
		],
		[
			"client",
			"31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033",
			"wss://relay.nostr.band",
			"web"
		],
		["t", "event"],
		["t", "standardized"]
	],
	"kind": 30023,
	"pubkey": "26bb2ebed6c552d670c804b0d655267b3c662b21e026d6e48ac93a6070530958",
	"id": "ed16238935665bebd4c897cdecc7a98a53a183dac90486d130e7193b1cb27f6a",
	"sig": "6357c6e986fa8e34fa6b0c89c425adb14229bb057b3edea8b5e0895e37acf7479705651e77d7c851e8504aa51d8394da447d9ae8d829ed6e438566dcc2243c9f"
}
